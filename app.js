const { createApp } = Vue;

const DefectForm = {
    template: `
        <div class="form-container">
            <div class="logo-container">
                <img src="Blue_Modern_Business.png.webp" alt="–õ–æ–≥–æ—Ç–∏–ø" class="logo">
            </div>
            
            <div class="form-content">
                <h1 class="form-title">–§–æ—Ä–º–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–µ—Ñ–µ–∫—Ç–æ–≤</h1>
                
                <form @submit.prevent="submitForm">
                    <div class="form-group">
                        <label class="form-label" for="foundationType">–¢–∏–ø —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞ (—Ç–∑–∫) *</label>
                        <select 
                            id="foundationType"
                            v-model="formData.foundationType"
                            class="form-select"
                            required
                        >
                            <option value="">–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞</option>
                            <option v-for="type in foundationTypes" :key="type" :value="type">
                                {{ type }}
                            </option>
                        </select>
                    </div>
                    
                    <div class="form-group">
                        <label class="form-label" for="wallType">–¢–∏–ø —Å—Ç–µ–Ω (—Ç–∑–∫) *</label>
                        <select 
                            id="wallType"
                            v-model="formData.wallType"
                            class="form-select"
                            required
                        >
                            <option value="">–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Ç–µ–Ω</option>
                            <option v-for="type in wallTypes" :key="type" :value="type">
                                {{ type }}
                            </option>
                        </select>
                    </div>
                    
                    <div class="form-group">
                        <label class="form-label" for="columnType">–¢–∏–ø –∫–æ–ª–æ–Ω–Ω (—Ç–∑–∫) *</label>
                        <select 
                            id="columnType"
                            v-model="formData.columnType"
                            class="form-select"
                            required
                        >
                            <option value="">–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–æ–ª–æ–Ω–Ω</option>
                            <option v-for="type in columnTypes" :key="type" :value="type">
                                {{ type }}
                            </option>
                        </select>
                    </div>
                    
                    <div class="form-group">
                        <label class="form-label">–¢–∏–ø –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–π (—Ç–∑–∫) *</label>
                        <div class="custom-select-container" @click.stop>
                            <div class="custom-select" @click="toggleFloorDropdown">
                                <div class="select-display">
                                    <span v-if="formData.floorType.length === 0" class="placeholder">
                                        –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–π
                                    </span>
                                    <span v-else class="selected-values">
                                        {{ formData.floorType.join(', ') }}
                                    </span>
                                </div>
                                <div class="select-arrow" :class="{ 'open': isFloorDropdownOpen }">‚ñº</div>
                            </div>
                            
                            <div v-if="isFloorDropdownOpen" class="custom-dropdown">
                                <div v-for="type in floorTypes" :key="type" class="dropdown-item">
                                    <input 
                                        type="checkbox" 
                                        :id="'floor-dropdown-' + type"
                                        :value="type"
                                        v-model="formData.floorType"
                                        class="dropdown-checkbox"
                                    >
                                    <label :for="'floor-dropdown-' + type" class="dropdown-label">
                                        {{ type }}
                                    </label>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="form-group">
                        <label class="form-label">–¢–∏–ø –∫—Ä—ã—à–∏/–ø–æ–∫—Ä—ã—Ç–∏–π *</label>
                        <div class="checkbox-list">
                            <div v-for="type in roofTypes" :key="type" class="checkbox-item">
                                <input 
                                    type="checkbox" 
                                    :id="'roof-' + type"
                                    :value="type"
                                    v-model="formData.roofType"
                                    class="checkbox-input-small"
                                >
                                <label :for="'roof-' + type" class="checkbox-item-label">
                                    {{ type }}
                                </label>
                            </div>
                        </div>
                    </div>
                    
                    <div class="form-group">
                        <label class="form-label">–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ</label>
                        <div class="file-upload-container">
                            <input 
                                type="file" 
                                id="photos"
                                @change="handleFileUpload"
                                multiple
                                accept="image/*"
                                class="file-input"
                            >
                            <label for="photos" class="file-upload-button">
                                <span class="upload-icon">üì∑</span>
                                <span class="upload-text">–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏</span>
                                <span class="upload-hint">–∏–ª–∏ –ø–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Ñ–∞–π–ª—ã —Å—é–¥–∞</span>
                            </label>
                        </div>
                        
                        <div v-if="formData.photos.length > 0" class="photo-preview-container">
                            <div class="photo-count">–í—ã–±—Ä–∞–Ω–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: {{ formData.photos.length }}</div>
                            <div class="photo-grid">
                                <div v-for="(photo, index) in photosPreviews" :key="index" class="photo-preview">
                                    <img :src="photo.url" :alt="photo.name" class="preview-image">
                                    <div class="photo-info">
                                        <div class="photo-name">{{ photo.name }}</div>
                                        <button type="button" @click="removePhoto(index)" class="remove-photo-btn">‚úï</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="checkbox-container">
                        <input 
                            type="checkbox" 
                            id="verification"
                            v-model="isVerified"
                            class="checkbox-input"
                        >
                        <label for="verification" class="checkbox-label">
                            –Ø –ø—Ä–æ–≤–µ—Ä–∏–ª –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã
                        </label>
                    </div>
                    
                    <button 
                        type="submit" 
                        class="submit-button"
                        :class="{ enabled: isVerified }"
                        :disabled="!isVerified"
                    >
                        –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ä–º—É
                    </button>
                    
                    <div v-if="submitMessage" :class="submitMessageClass">
                        {{ submitMessage }}
                    </div>
                </form>
            </div>
        </div>
    `,
    
    data() {
        return {
            formData: {
                foundationType: '',
                wallType: '',
                columnType: '',
                floorType: [],
                roofType: [],
                photos: []
            },
            
            photosPreviews: [],
            isFloorDropdownOpen: false,
            
            foundationTypes: [
                '–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è',
                '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç',
                '–õ–µ–Ω—Ç–æ—á–Ω—ã–π –±—É—Ç–æ–≤—ã–π',
                '–õ–µ–Ω—Ç–æ—á–Ω—ã–µ –∏–∑ –±–ª–æ–∫–æ–≤ –§–ë–°',
                '–§—É–Ω–¥–∞–º–µ–Ω—Ç—ã —Å—Ç–æ–ª–±—á–∞—Ç—ã–µ —Å—Ç–∞–∫–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞',
                '–ü–ª–∏—Ç–Ω—ã–π',
                '–ú–æ–Ω–æ–ª–∏—Ç–Ω–∞—è –∂/–± –ø–ª–∏—Ç–∞'
            ],
            
            wallTypes: [
                '–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è',
                '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç',
                '–ö—Ä—É–ø–Ω—ã–µ –∂–µ–ª–µ–∑–æ–±–µ—Ç–æ–Ω–Ω—ã–µ –±–ª–æ–∫–∏',
                '–ñ–µ–ª–µ–∑–æ–±–µ—Ç–æ–Ω–Ω—ã–µ –ø–∞–Ω–µ–ª–∏',
                '–°–∏–ª–∏–∫–∞—Ç–Ω—ã–π –∫–∏—Ä–ø–∏—á',
                '–ö–µ—Ä–∞–º–∏—á–µ—Å–∫–∏–π –∫–∏—Ä–ø–∏—á',
                '–î–µ—Ä–µ–≤—è–Ω–Ω—ã–µ –∫–∞—Ä–∫–∞—Å–Ω–æ-—â–∏—Ç–æ–≤—ã–µ',
                '–î–µ—Ä–µ–≤—è–Ω–Ω—ã–µ —Ä—É–±–ª–µ–Ω—ã–µ –±—Ä—É—Å—á–∞—Ç—ã–µ –∏ –±—Ä–µ–≤–µ–Ω—á–∞—Ç—ã–µ'
            ],
            
            columnTypes: [
                '–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è',
                '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç',
                '–°–∏–ª–∏–∫–∞—Ç–Ω—ã–π –∫–∏—Ä–ø–∏—á',
                '–ö–µ—Ä–∞–º–∏—á–µ—Å–∫–∏–π –∫–∏—Ä–ø–∏—á',
                '–°–±–æ—Ä–Ω—ã–µ'
            ],
            
            floorTypes: [
                '–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è',
                '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç',
                '–î–µ—Ä–µ–≤—è–Ω–Ω—ã–µ',
                '–°–±–æ—Ä–Ω—ã–µ –∂–µ–ª–µ–∑–æ–±–µ—Ç–æ–Ω–Ω—ã–µ —Ç–∏–ø–∞ –ü–ö',
                '–°–±–æ—Ä–Ω—ã–µ –∂–µ–ª–µ–∑–æ–±–µ—Ç–æ–Ω–Ω—ã–µ –Ω–∞—Å—Ç–∏–ª—å–Ω—ã–µ',
                '–ú–æ–Ω–æ–ª–∏—Ç–Ω—ã–µ'
            ],
            
            roofTypes: [
                '–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è',
                '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç',
                '–°–æ–≤–º–µ—â–µ–Ω–Ω–∞—è –∂–µ–ª–µ–∑–æ–±–µ—Ç–æ–Ω–Ω–∞—è',
                '–ß–µ—Ä–¥–∞—á–Ω–∞—è',
                '–î–µ—Ä–µ–≤—è–Ω–Ω–∞—è —Å—Ç—Ä–æ–ø–∏–ª—å–Ω–∞—è'
            ],
            
            isVerified: false,
            submitMessage: '',
            submitMessageClass: ''
        }
    },
    
    mounted() {
        // –ó–∞–∫—Ä—ã—Ç–∏–µ dropdown –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ–≥–æ
        document.addEventListener('click', this.closeFloorDropdown);
    },
    
    beforeUnmount() {
        document.removeEventListener('click', this.closeFloorDropdown);
    },
    
    methods: {
        toggleFloorDropdown() {
            this.isFloorDropdownOpen = !this.isFloorDropdownOpen;
        },
        
        closeFloorDropdown() {
            this.isFloorDropdownOpen = false;
        },
        
        handleFileUpload(event) {
            const files = event.target.files;
            const newFiles = Array.from(files);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Ñ–∞–π–ª—ã –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º
            this.formData.photos = [...this.formData.photos, ...newFiles];
            
            // –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–≤—å—é –¥–ª—è –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
            this.createPhotoPreviews();
            
            // –û—á–∏—â–∞–µ–º input, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –≤—ã–±—Ä–∞—Ç—å —Ç–µ –∂–µ —Ñ–∞–π–ª—ã –ø–æ–≤—Ç–æ—Ä–Ω–æ
            event.target.value = '';
        },
        
        createPhotoPreviews() {
            // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –ø—Ä–µ–≤—å—é
            this.photosPreviews = [];
            
            // –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–≤—å—é –¥–ª—è –≤—Å–µ—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∑–∞–Ω–æ–≤–æ
            this.formData.photos.forEach((file, index) => {
                if (file.type.startsWith('image/')) {
                    const reader = new FileReader();
                    reader.onload = (e) => {
                        this.photosPreviews[index] = {
                            url: e.target.result,
                            name: file.name,
                            size: file.size
                        };
                    };
                    reader.readAsDataURL(file);
                }
            });
        },
        
        removePhoto(index) {
            this.formData.photos.splice(index, 1);
            // –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –ø—Ä–µ–≤—å—é –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
            this.createPhotoPreviews();
        },
        
        async submitForm() {
            if (!this.isVerified) {
                return;
            }
            
            try {
                const formDataToSend = new FormData();
                
                // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω—ã–µ –ø–æ–ª—è
                formDataToSend.append('foundationType', this.formData.foundationType);
                formDataToSend.append('wallType', this.formData.wallType);
                formDataToSend.append('columnType', this.formData.columnType);
                formDataToSend.append('floorType', JSON.stringify(this.formData.floorType));
                formDataToSend.append('roofType', JSON.stringify(this.formData.roofType));
                formDataToSend.append('submittedAt', new Date().toISOString());
                
                // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
                this.formData.photos.forEach((photo, index) => {
                    formDataToSend.append(`photo_${index}`, photo);
                });
                
                // –ó–¥–µ—Å—å —É–∫–∞–∂–∏—Ç–µ –≤–∞—à HTTPS –∞–¥—Ä–µ—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö
                const response = await fetch('https://your-api-endpoint.com/defects', {
                    method: 'POST',
                    body: formDataToSend
                });
                
                if (response.ok) {
                    this.submitMessage = '–§–æ—Ä–º–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!';
                    this.submitMessageClass = 'success-message';
                    this.resetForm();
                } else {
                    throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ä–º—ã');
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:', error);
                this.submitMessage = '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ä–º—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.';
                this.submitMessageClass = 'error-message';
            }
            
            // –°–∫—Ä—ã—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
            setTimeout(() => {
                this.submitMessage = '';
                this.submitMessageClass = '';
            }, 5000);
        },
        
        resetForm() {
            this.formData = {
                foundationType: '',
                wallType: '',
                columnType: '',
                floorType: [],
                roofType: [],
                photos: []
            };
            this.photosPreviews = [];
            this.isVerified = false;
            this.isFloorDropdownOpen = false;
            
            // –û—á–∏—â–∞–µ–º input —Ñ–∞–π–ª–æ–≤
            const fileInput = document.getElementById('photos');
            if (fileInput) {
                fileInput.value = '';
            }
        }
    }
};

createApp({
    components: {
        DefectForm
    }
}).mount('#app'); 